// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/login": {
            "post": {
                "description": "Проверяет данные для входа и в случае успеха возвращает токен для входа",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Аутентификация"
                ],
                "summary": "Вход в систему",
                "parameters": [
                    {
                        "description": "Данные для входа",
                        "name": "request_body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/app.loginReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/app.loginResp"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Аутентификация"
                ],
                "summary": "Выйти из системы",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/orbits": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Возвращает все доступные орбиты по указанным фильтрам",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Орбиты"
                ],
                "summary": "Получение всех орбит со статусом \"Доступна\" по фильтрам",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Название орбиты или его часть",
                        "name": "orbit_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Включение орбит в заявку (true/false)",
                        "name": "orbit_incl",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Круговая орбита (true/false)",
                        "name": "is_circle",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешно получены орбиты",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Некорректные параметры запроса",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/orbits/image": {
            "post": {
                "description": "Загружает изображение для указанной орбиты и сохраняет его в Minio",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Орбиты"
                ],
                "summary": "Загрузка изображения для орбиты",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Имя орбиты, для которой загружается изображение",
                        "name": "orbitName",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Изображение для загрузки",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешно загружено изображение в Minio",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/orbits/new_orbit": {
            "post": {
                "description": "Добавляет орбиту с полями, указанныим в JSON",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Орбиты"
                ],
                "summary": "Добавление новой орбиты",
                "parameters": [
                    {
                        "description": "Данные новой орбиты",
                        "name": "orbit",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ds.Orbit"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/orbits/transfer/{req_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Возвращает список орбит, связанных с указанной заявкой",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Трансферы"
                ],
                "summary": "Получение орбит из заявки",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID заявки",
                        "name": "req_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список орбит, связанных с заявкой",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ds.Orbit"
                            }
                        }
                    },
                    "400": {
                        "description": "Ошибка в ID заявки",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Доступ запрещен, отсутствует авторизация",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Заявка не найдена",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка при получении орбит из заявки",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/orbits/{orbit_name}": {
            "get": {
                "description": "Возвращает подробную информацию об орбите по ее названию",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Орбиты"
                ],
                "summary": "Получение детализированной информации об орбите",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Название орбиты",
                        "name": "orbit_name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/orbits/{orbit_name}/add": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Создает заявку на трансфер в статусе (или добавляет в открытую) и добавляет выбранную орбиту",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Орбиты"
                ],
                "summary": "Добавление орбиты в заявку на трансфер",
                "parameters": [
                    {
                        "type": "string",
                        "format": "ascii",
                        "description": "Название орбиты",
                        "name": "orbit_name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Орбита добавлена успешно",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Некорректные данные заявки или орбиты",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/orbits/{orbit_name}/edit": {
            "put": {
                "description": "Обновляет данные об орбите, основываясь на полях из JSON",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Орбиты"
                ],
                "summary": "Изменение орбиты",
                "parameters": [
                    {
                        "description": "Орбита",
                        "name": "orbit",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ds.Orbit"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/orbits/{orbit_name}/status": {
            "delete": {
                "description": "Изменяет статус указанной орбиты",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Орбиты"
                ],
                "summary": "Изменение статуса орбиты",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Имя орбиты для изменения статуса",
                        "name": "orbit_name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Статус орбиты успешно изменен",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/orbits/{req_id}": {
            "get": {
                "description": "Возвращает порядок перелетов по орбитам для конкретной заявки",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Трансферы"
                ],
                "summary": "Получение порядка перелетов по орибтам",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID заявки",
                        "name": "req_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешный ответ с порядком перелетов по орбитам",
                        "schema": {
                            "$ref": "#/definitions/ds.OrbitOrder"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Добавляет в БД нового пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Аутентификация"
                ],
                "summary": "Зарегистрировать нового пользователя",
                "parameters": [
                    {
                        "description": "Данные для регистрации",
                        "name": "request_body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/app.registerReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/app.registerResp"
                        }
                    }
                }
            }
        },
        "/requests/status": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Изменяет статус указанной заявки в зависимости от роли пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Заявки на трансфер"
                ],
                "summary": "Изменение статуса заявки",
                "parameters": [
                    {
                        "description": "Тело запроса для изменения статуса заявки",
                        "name": "request_body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ds.ChangeTransferStatusRequestBody"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Статус заявки успешно изменен",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Запрещено изменение статуса",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Заявка не найдена",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/transfer/result": {
            "post": {
                "description": "Получает ответ от выделенного сервиса и вносит изменения в БД",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Асинхронный сервис"
                ],
                "summary": "Обновление поля успеха маневра в заявке",
                "parameters": [
                    {
                        "description": "Тело запроса для обновления результата маневра",
                        "name": "request_body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ds.AsyncBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Статус успешно обновлен",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/transfer_requests": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Получает все заявки на трансфер",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Заявки на трансфер"
                ],
                "summary": "Получение всех заявок на трансфер",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Дата начала периода фильтрации (YYYY-MM-DD)",
                        "name": "date_start",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Дата окончания периода фильтрации (YYYY-MM-DD)",
                        "name": "date_fin",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Статус заявки на трансфер",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список заявок на трансфер",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/transfer_requests/{req_id}": {
            "get": {
                "description": "Получает подробную информаицю о заявке на трансфер",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Заявки на трансфер"
                ],
                "summary": "Получение детализированной заявки на трансфер",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID заявки",
                        "name": "req_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "301": {
                        "description": "Moved Permanently",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/transfers/delete": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Удаляет перелет между указанной заявкой и орбитой по их идентификаторам",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Трансферы"
                ],
                "summary": "Удаление перелета по двум ID",
                "parameters": [
                    {
                        "description": "Тело запроса для удаления связи",
                        "name": "request_body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ds.DelTransferToOrbitBody"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Перелет успешно удален",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Доступ запрещен, отсутствует авторизация",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Орбита не найдена",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка при удалении связи",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/transfers/update-order": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Обновляет порядок посещения орбит в указанной заявке на основе предоставленных данных",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Трансферы"
                ],
                "summary": "Обновление порядка посещения орбит в заявке",
                "parameters": [
                    {
                        "description": "Тело запроса для обновления порядка",
                        "name": "request_body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ds.UpdateTransferOrdersBody"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Порядок посещения успешно изменен",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Доступ запрещен, отсутствует авторизация",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Заявка не найдена",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка при обновлении порядка посещения",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "app.loginReq": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "app.loginResp": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                },
                "login": {
                    "type": "string"
                },
                "role": {
                    "type": "integer"
                },
                "token_type": {
                    "type": "string"
                }
            }
        },
        "app.registerReq": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "app.registerResp": {
            "type": "object",
            "properties": {
                "ok": {
                    "type": "boolean"
                }
            }
        },
        "ds.AsyncBody": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "status": {
                    "type": "boolean"
                }
            }
        },
        "ds.ChangeTransferStatusRequestBody": {
            "type": "object",
            "properties": {
                "reqID": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "ds.DelTransferToOrbitBody": {
            "type": "object",
            "properties": {
                "orbit": {
                    "type": "string"
                },
                "req": {
                    "type": "string"
                }
            }
        },
        "ds.Orbit": {
            "type": "object",
            "properties": {
                "apogee": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "imageURL": {
                    "type": "string"
                },
                "inclination": {
                    "type": "string"
                },
                "isAvailable": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "perigee": {
                    "type": "string"
                }
            }
        },
        "ds.OrbitOrder": {
            "type": "object",
            "properties": {
                "orbit_name": {
                    "type": "string"
                },
                "transfer_order": {
                    "type": "integer"
                }
            }
        },
        "ds.UpdateTransferOrdersBody": {
            "type": "object",
            "properties": {
                "req_id": {
                    "type": "integer"
                },
                "transfer_order": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.0-0",
	Host:             "localhost:8000",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "orbits docs",
	Description:      "ORBIT TRANSFER",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
